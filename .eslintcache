[{"E:\\React\\git\\skara-social-net\\src\\redux\\auth-reducer.ts":"1","E:\\React\\git\\skara-social-net\\src\\redux\\app-reducer.ts":"2","E:\\React\\git\\skara-social-net\\src\\redux\\dialogs-reducer.ts":"3","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Audio.js":"4","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Play.js":"5","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Song.js":"6","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Pause.js":"7","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Bar.js":"8","E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\useAudioPlayer.js":"9","E:\\React\\git\\skara-social-net\\src\\redux\\profile-reducer.ts":"10","E:\\React\\git\\skara-social-net\\src\\redux\\redux-store.ts":"11","E:\\React\\git\\skara-social-net\\src\\Components\\Users\\UsersConteiner.tsx":"12","E:\\React\\git\\skara-social-net\\src\\redux\\users-reducer.ts":"13","E:\\React\\git\\skara-social-net\\src\\redux\\sidebar-reducer.ts":"14","E:\\React\\git\\skara-social-net\\src\\redux\\users-selectors.ts":"15","E:\\React\\git\\skara-social-net\\src\\Components\\Users\\Users.tsx":"16","E:\\React\\git\\skara-social-net\\src\\utils\\FormsControls.tsx":"17","E:\\React\\git\\skara-social-net\\src\\utils\\validators\\validator.tsx":"18","E:\\React\\git\\skara-social-net\\src\\api\\api.ts":"19","E:\\React\\git\\skara-social-net\\src\\utils\\Paginator.tsx":"20","E:\\React\\git\\skara-social-net\\src\\api\\authApi.ts":"21","E:\\React\\git\\skara-social-net\\src\\api\\userAPI.ts":"22","E:\\React\\git\\skara-social-net\\src\\api\\profileAPI.ts":"23","E:\\React\\git\\skara-social-net\\src\\api\\securityApi.ts":"24","E:\\React\\git\\skara-social-net\\src\\utils\\object-helpers.ts":"25","E:\\React\\git\\skara-social-net\\src\\App.tsx":"26","E:\\React\\git\\skara-social-net\\src\\Components\\Hoc\\withSuspense.tsx":"27","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\DialogsConteiner.tsx":"28","E:\\React\\git\\skara-social-net\\src\\Components\\Hoc\\withAuthComponent.tsx":"29","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\Dialogs.tsx":"30","E:\\React\\git\\skara-social-net\\src\\Components\\Users\\User.tsx":"31","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx":"32","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\Message\\Message.tsx":"33","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx":"34","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"35","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"36","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\Profile.tsx":"37","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"38","E:\\React\\git\\skara-social-net\\src\\Components\\Navbar\\Navbar.tsx":"39","E:\\React\\git\\skara-social-net\\src\\Components\\Preloader\\Preloader.tsx":"40","E:\\React\\git\\skara-social-net\\src\\Components\\Header\\Header.tsx":"41","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileContainer.tsx":"42","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx":"43","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\AddPostForm.tsx":"44","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx":"45","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx":"46","E:\\React\\git\\skara-social-net\\src\\index.tsx":"47","E:\\React\\git\\skara-social-net\\src\\Components\\Users\\UsersSearchForm.tsx":"48","E:\\React\\git\\skara-social-net\\src\\Components\\Login\\LoginPage.tsx":"49","E:\\React\\git\\skara-social-net\\src\\pages\\Chat\\ChatPage.tsx":"50","E:\\React\\git\\skara-social-net\\src\\redux\\chat-reducer.ts":"51","E:\\React\\git\\skara-social-net\\src\\api\\chatApi.ts":"52"},{"size":2785,"mtime":1622895431813,"results":"53","hashOfConfig":"54"},{"size":941,"mtime":1621454898095,"results":"55","hashOfConfig":"54"},{"size":1219,"mtime":1621536402243,"results":"56","hashOfConfig":"54"},{"size":1028,"mtime":1619817306457,"results":"57","hashOfConfig":"58"},{"size":316,"mtime":1619817411907,"results":"59","hashOfConfig":"58"},{"size":312,"mtime":1619817422916,"results":"60","hashOfConfig":"58"},{"size":318,"mtime":1619817382125,"results":"61","hashOfConfig":"58"},{"size":1869,"mtime":1619818518484,"results":"62","hashOfConfig":"58"},{"size":1425,"mtime":1619817477006,"results":"63","hashOfConfig":"58"},{"size":3955,"mtime":1621458913427,"results":"64","hashOfConfig":"54"},{"size":1363,"mtime":1625775301721,"results":"65","hashOfConfig":"54"},{"size":513,"mtime":1625755361163,"results":"66","hashOfConfig":"54"},{"size":4938,"mtime":1625751680854,"results":"67","hashOfConfig":"54"},{"size":201,"mtime":1620241914954,"results":"68","hashOfConfig":"54"},{"size":1105,"mtime":1625777032395,"results":"69","hashOfConfig":"54"},{"size":3123,"mtime":1625758833091,"results":"70","hashOfConfig":"54"},{"size":1829,"mtime":1622034745933,"results":"71","hashOfConfig":"54"},{"size":404,"mtime":1620914367282,"results":"72","hashOfConfig":"54"},{"size":538,"mtime":1622895503048,"results":"73","hashOfConfig":"54"},{"size":2062,"mtime":1622409754436,"results":"74","hashOfConfig":"54"},{"size":737,"mtime":1621452257559,"results":"75","hashOfConfig":"54"},{"size":946,"mtime":1625750881471,"results":"76","hashOfConfig":"54"},{"size":1157,"mtime":1621458272577,"results":"77","hashOfConfig":"54"},{"size":272,"mtime":1621451193921,"results":"78","hashOfConfig":"54"},{"size":300,"mtime":1621459994940,"results":"79","hashOfConfig":"54"},{"size":2693,"mtime":1625777468250,"results":"80","hashOfConfig":"54"},{"size":367,"mtime":1621716903214,"results":"81","hashOfConfig":"54"},{"size":515,"mtime":1621537228191,"results":"82","hashOfConfig":"54"},{"size":902,"mtime":1621717350261,"results":"83","hashOfConfig":"54"},{"size":1249,"mtime":1621539059950,"results":"84","hashOfConfig":"54"},{"size":1984,"mtime":1625754554678,"results":"85","hashOfConfig":"54"},{"size":1205,"mtime":1625754331597,"results":"86","hashOfConfig":"54"},{"size":274,"mtime":1621716700930,"results":"87","hashOfConfig":"54"},{"size":426,"mtime":1621538655389,"results":"88","hashOfConfig":"54"},{"size":3431,"mtime":1622034674628,"results":"89","hashOfConfig":"54"},{"size":1980,"mtime":1622034745933,"results":"90","hashOfConfig":"54"},{"size":864,"mtime":1622045555541,"results":"91","hashOfConfig":"54"},{"size":1271,"mtime":1622040074402,"results":"92","hashOfConfig":"54"},{"size":334,"mtime":1622040850276,"results":"93","hashOfConfig":"54"},{"size":248,"mtime":1622408548857,"results":"94","hashOfConfig":"54"},{"size":2273,"mtime":1625777311637,"results":"95","hashOfConfig":"54"},{"size":2603,"mtime":1622111676272,"results":"96","hashOfConfig":"54"},{"size":1047,"mtime":1622111504950,"results":"97","hashOfConfig":"54"},{"size":824,"mtime":1622042305279,"results":"98","hashOfConfig":"54"},{"size":415,"mtime":1622110636349,"results":"99","hashOfConfig":"54"},{"size":666,"mtime":1622411059307,"results":"100","hashOfConfig":"54"},{"size":183,"mtime":1622111303298,"results":"101","hashOfConfig":"54"},{"size":1818,"mtime":1625759012388,"results":"102","hashOfConfig":"54"},{"size":2398,"mtime":1625755579270,"results":"103","hashOfConfig":"54"},{"size":2900,"mtime":1625778426195,"results":"104","hashOfConfig":"54"},{"size":2845,"mtime":1625775694182,"results":"105","hashOfConfig":"54"},{"size":2668,"mtime":1625775053227,"results":"106","hashOfConfig":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"tzs8qe",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"bsqf97",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"109"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"109"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"109"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"109"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"109"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"109"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"109"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"109"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"109"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"E:\\React\\git\\skara-social-net\\src\\redux\\auth-reducer.ts",[],["224","225"],"E:\\React\\git\\skara-social-net\\src\\redux\\app-reducer.ts",[],"E:\\React\\git\\skara-social-net\\src\\redux\\dialogs-reducer.ts",[],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Audio.js",[],["226","227"],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Play.js",[],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Song.js",[],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Pause.js",[],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\Bar.js",[],"E:\\React\\git\\skara-social-net\\src\\Components\\AudioPlayer\\useAudioPlayer.js",["228"],"import { useState, useEffect } from \"react\";\r\n\r\nfunction useAudioPlayer() {\r\n    const [duration, setDuration] = useState();\r\n    const [curTime, setCurTime] = useState();\r\n    const [playing, setPlaying] = useState(false);\r\n    const [clickedTime, setClickedTime] = useState();\r\n\r\n    useEffect(() => {\r\n        const audio = document.getElementById(\"audio\");\r\n\r\n        // state setters wrappers\r\n        const setAudioData = () => {\r\n            setDuration(audio.duration);\r\n            setCurTime(audio.currentTime);\r\n        }\r\n\r\n        const setAudioTime = () => setCurTime(audio.currentTime);\r\n\r\n        // DOM listeners: update React state on DOM events\r\n        audio.addEventListener(\"loadeddata\", setAudioData);\r\n\r\n        audio.addEventListener(\"timeupdate\", setAudioTime);\r\n\r\n        // React state listeners: update DOM on React state changes\r\n        playing ? audio.play() : audio.pause();\r\n\r\n        if (clickedTime && clickedTime !== curTime) {\r\n            audio.currentTime = clickedTime;\r\n            setClickedTime(null);\r\n        }\r\n\r\n        // effect cleanup\r\n        return () => {\r\n            audio.removeEventListener(\"loadeddata\", setAudioData);\r\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\r\n        }\r\n    });\r\n\r\n    return {\r\n        curTime,\r\n        duration,\r\n        playing,\r\n        setPlaying,\r\n        setClickedTime\r\n    }\r\n}\r\n\r\nexport default useAudioPlayer;","E:\\React\\git\\skara-social-net\\src\\redux\\profile-reducer.ts",["229"],"import {FormAction, stopSubmit} from \"redux-form\"\r\nimport {AxiosResponse} from \"axios\"\r\nimport {PhotosType, PostType, ProfileType} from \"../Types/Types\";\r\nimport {userAPI} from \"../api/userAPI\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi\", likesCount: 12},\r\n        {id: 2, message: \"Hi man\", likesCount: 7}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    newPostText: \"\"\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) =>\r\n        ({type: \"SN/PROFILE/ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) =>\r\n        ({type: \"SN/PROFILE/SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) =>\r\n        ({type: \"SN/PROFILE/SET_USER_STATUS\", status} as const),\r\n    deletePost: (postId: number) =>\r\n        ({type: \"SN/PROFILE/DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) =>\r\n        ({type: \"SN/PROFILE/SAVE_PHOTOS_SUCCESS\", photos} as const)\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET_USER_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SAVE_PHOTOS_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await userAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = profileAPI.updateStatus(status);\r\n    //@ts-ignore\r\n   if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            await dispatch(getUserProfile(userId))\r\n        } else {\r\n         throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n","E:\\React\\git\\skara-social-net\\src\\redux\\redux-store.ts",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Users\\UsersConteiner.tsx",[],"E:\\React\\git\\skara-social-net\\src\\redux\\users-reducer.ts",[],"E:\\React\\git\\skara-social-net\\src\\redux\\sidebar-reducer.ts",[],"E:\\React\\git\\skara-social-net\\src\\redux\\users-selectors.ts",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Users\\Users.tsx",["230"],"import React, {useEffect} from \"react\";\r\nimport Paginator from \"../../utils/Paginator\";\r\nimport User from \"./User\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingProgress)\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const parsed: {\r\n        term?: string\r\n        friend?: \"true\" | \"false\" | \"null\"\r\n        page?: string\r\n    } = queryString.parse(history.location.search)\r\n\r\n    const actualFilter = {...filter}\r\n    let actualPage = currentPage\r\n\r\n    if (parsed.term) {\r\n        actualFilter.term = parsed.term\r\n    }\r\n    if (parsed.friend) {\r\n        actualFilter.friend = parsed.friend === \"true\" ?\r\n            true: parsed.friend === \"false\" ? false: null\r\n    }\r\n    if (parsed.page && parsed.page !== \"1\") {\r\n        actualPage = +parsed.page\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestUsers(currentPage, pageSize, actualFilter))\r\n    },[])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: `?term=${filter.term}&friend=${filter.friend}&\r\n            page=${pageNumber}`\r\n        })\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        history.push({\r\n            pathname: '/users',\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${actualPage}`\r\n        })\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}\r\n                         initialValue={actualFilter}/>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfollow}\r\n                                     follow={follow}/>\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;\r\n","E:\\React\\git\\skara-social-net\\src\\utils\\FormsControls.tsx",[],"E:\\React\\git\\skara-social-net\\src\\utils\\validators\\validator.tsx",[],"E:\\React\\git\\skara-social-net\\src\\api\\api.ts",[],"E:\\React\\git\\skara-social-net\\src\\utils\\Paginator.tsx",[],"E:\\React\\git\\skara-social-net\\src\\api\\authApi.ts",[],"E:\\React\\git\\skara-social-net\\src\\api\\userAPI.ts",[],"E:\\React\\git\\skara-social-net\\src\\api\\profileAPI.ts",[],"E:\\React\\git\\skara-social-net\\src\\api\\securityApi.ts",[],"E:\\React\\git\\skara-social-net\\src\\utils\\object-helpers.ts",[],"E:\\React\\git\\skara-social-net\\src\\App.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Hoc\\withSuspense.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\DialogsConteiner.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Hoc\\withAuthComponent.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\Dialogs.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Users\\User.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx",["231"],"import {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../utils/FormsControls\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport { NewMessageFormValuesType } from \"../Dialogs\";\r\nimport {LoginFormValuesType} from \"../../Login/LoginPage\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType,\r\n    PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\",\r\n                    'newMessageBody', [required, maxLength10], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form:\r\n    'dialog-add-message-form'})(AddMessageForm)\r\n","E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\Message\\Message.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["232"],"import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport userPhoto from \"./close-up.jpg\"\r\nimport Preloader from \"../../Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ContactsType, ProfileType} from \"../../../Types/Types\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n                         profile, status, updateStatus,\r\n                         isOwner, savePhoto, saveProfile\r\n                     }) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\nconst onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n}\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n            {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            {editMode ? <ProfileDataForm initialValues={profile} profile = {profile} onSubmit={onSubmit}/>\r\n                : <ProfileData goToEditMode={() => {\r\n                    setEditMode(true)\r\n                }} profile={profile} isOwner={isOwner}/>}\r\n            <ProfileStatusWithHooks status={status}\r\n                                    updateStatus={updateStatus}/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription ? \"yes\" : \"no\"}\r\n            </div>}\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n          <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\nexport default ProfileInfo;\r\n\r\n/*<img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>*/","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\Profile.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Navbar\\Navbar.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Preloader\\Preloader.tsx",["233"],"import React from 'react';\r\nimport preloader from '../../img/preloader.gif';\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","E:\\React\\git\\skara-social-net\\src\\Components\\Header\\Header.tsx",["234"],"import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Box, Button} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getLogin} from \"../../redux/users-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport type MapPropsType = {}\r\n\r\nconst Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n    const login = useSelector(getLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return <header className={s.header}>\r\n        <img src=\"https://source.unsplash.com/random\"/>\r\n        <div className={s.loginBlock}>\r\n            {isAuth ?\r\n                <Button onClick={logoutCallback} variant=\"contained\" color=\"primary\">\r\n                    {login} Log out\r\n                </Button>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>}\r\n        </div>\r\n\r\n        <Box className={s.menuBlock}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Profile\r\n                </Button></NavLink>\r\n\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Messages\r\n                </Button></NavLink>\r\n            <NavLink to=\"/chat\" activeClassName={s.activeLink}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Chat\r\n                </Button></NavLink>\r\n            <NavLink to=\"/users\" activeClassName=\"#contained-buttons\">\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Friends\r\n                </Button></NavLink>\r\n\r\n            <NavLink to=\"/news\" activeClassName={s.activeLink}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    News\r\n                </Button></NavLink>\r\n\r\n            <NavLink to=\"/music\" activeClassName={s.activeLink}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Music\r\n                </Button></NavLink>\r\n        </Box>\r\n\r\n    </header>\r\n}\r\nexport default Header;","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\ProfileContainer.tsx",["235"],"import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\"\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../Types/Types\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, savePhoto, saveProfile,\r\n        getStatus, updateStatus\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)","E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\AddPostForm.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx",[],["236","237"],"E:\\React\\git\\skara-social-net\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx",["238"],"import React from \"react\";\r\nimport {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport MyPostsMemorized from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {},\r\n    AppStateType>\r\n(mapStateToProps,{\r\n    addPost: actions.addPostActionCreator}) (MyPostsMemorized);\r\n\r\nexport default MyPostsContainer;","E:\\React\\git\\skara-social-net\\src\\index.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Users\\UsersSearchForm.tsx",[],"E:\\React\\git\\skara-social-net\\src\\Components\\Login\\LoginPage.tsx",["239"],"import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../../utils/FormsControls'\r\nimport {required} from '../../utils/validators/validator'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport style from '../../utils/FormsControls.module.css'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}","E:\\React\\git\\skara-social-net\\src\\pages\\Chat\\ChatPage.tsx",["240","241","242"],"E:\\React\\git\\skara-social-net\\src\\redux\\chat-reducer.ts",[],"E:\\React\\git\\skara-social-net\\src\\api\\chatApi.ts",[],{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"243","replacedBy":"247"},{"ruleId":"245","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":9,"column":5,"nodeType":"251","endLine":9,"endColumn":14,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":2,"column":9,"nodeType":"251","messageId":"255","endLine":2,"endColumn":22},{"ruleId":"249","severity":1,"message":"256","line":55,"column":7,"nodeType":"257","endLine":55,"endColumn":9,"suggestions":"258"},{"ruleId":"253","severity":1,"message":"259","line":7,"column":9,"nodeType":"251","messageId":"255","endLine":7,"endColumn":28},{"ruleId":"260","severity":1,"message":"261","line":42,"column":13,"nodeType":"262","endLine":42,"endColumn":83},{"ruleId":"260","severity":1,"message":"261","line":6,"column":9,"nodeType":"262","endLine":6,"endColumn":32},{"ruleId":"260","severity":1,"message":"261","line":23,"column":9,"nodeType":"262","endLine":23,"endColumn":56},{"ruleId":"263","severity":1,"message":"264","line":24,"column":5,"nodeType":"265","messageId":"266","endLine":26,"endColumn":6},{"ruleId":"243","replacedBy":"267"},{"ruleId":"245","replacedBy":"268"},{"ruleId":"253","severity":1,"message":"269","line":1,"column":8,"nodeType":"251","messageId":"255","endLine":1,"endColumn":13},{"ruleId":"260","severity":1,"message":"261","line":23,"column":28,"nodeType":"262","endLine":23,"endColumn":51},{"ruleId":"249","severity":1,"message":"270","line":26,"column":8,"nodeType":"257","endLine":26,"endColumn":10,"suggestions":"271"},{"ruleId":"249","severity":1,"message":"272","line":55,"column":8,"nodeType":"257","endLine":55,"endColumn":18,"suggestions":"273"},{"ruleId":"260","severity":1,"message":"261","line":66,"column":9,"nodeType":"262","endLine":66,"endColumn":64},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],["274"],["275"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [playing, clickedTime, curTime] as a second argument to the useEffect Hook.","Identifier",["276"],"@typescript-eslint/no-unused-vars","'AxiosResponse' is defined but never used.","unusedVar","React Hook useEffect has missing dependencies: 'actualFilter', 'currentPage', 'dispatch', and 'pageSize'. Either include them or remove the dependency array.","ArrayExpression",["277"],"'LoginFormValuesType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["274"],["275"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has a missing dependency: 'isAutoScroll'. Either include it or remove the dependency array.",["279"],"no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},"Add dependencies array: [playing, clickedTime, curTime]",{"range":"288","text":"289"},"Update the dependencies array to be: [actualFilter, currentPage, dispatch, pageSize]",{"range":"290","text":"291"},"Update the dependencies array to be: [dispatch]",{"range":"292","text":"293"},"Update the dependencies array to be: [isAutoScroll, messages]",{"range":"294","text":"295"},[1263,1263],", [playing, clickedTime, curTime]",[1687,1689],"[actualFilter, currentPage, dispatch, pageSize]",[758,760],"[dispatch]",[1714,1724],"[isAutoScroll, messages]"]